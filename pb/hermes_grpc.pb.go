// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: hermes.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HermesClient is the client API for Hermes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HermesClient interface {
	DocumentStore(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentReply, error)
	DocumentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDocument, error)
	DepartmentStore(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*DepartmentReply, error)
	DepartmentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*DepartmentReply, error)
	DocumentTypeStore(ctx context.Context, in *DocumentTypeRequest, opts ...grpc.CallOption) (*DocumentTypeReply, error)
	DocumentTypeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDocumentType, error)
	DocumentImageStore(ctx context.Context, opts ...grpc.CallOption) (Hermes_DocumentImageStoreClient, error)
}

type hermesClient struct {
	cc grpc.ClientConnInterface
}

func NewHermesClient(cc grpc.ClientConnInterface) HermesClient {
	return &hermesClient{cc}
}

func (c *hermesClient) DocumentStore(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentReply, error) {
	out := new(DocumentReply)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DocumentStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DocumentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDocument, error) {
	out := new(ListDocument)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DocumentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DepartmentStore(ctx context.Context, in *DepartmentRequest, opts ...grpc.CallOption) (*DepartmentReply, error) {
	out := new(DepartmentReply)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DepartmentStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DepartmentList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*DepartmentReply, error) {
	out := new(DepartmentReply)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DocumentTypeStore(ctx context.Context, in *DocumentTypeRequest, opts ...grpc.CallOption) (*DocumentTypeReply, error) {
	out := new(DocumentTypeReply)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DocumentTypeStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DocumentTypeList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDocumentType, error) {
	out := new(ListDocumentType)
	err := c.cc.Invoke(ctx, "/hermes.Hermes/DocumentTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hermesClient) DocumentImageStore(ctx context.Context, opts ...grpc.CallOption) (Hermes_DocumentImageStoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hermes_ServiceDesc.Streams[0], "/hermes.Hermes/DocumentImageStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &hermesDocumentImageStoreClient{stream}
	return x, nil
}

type Hermes_DocumentImageStoreClient interface {
	Send(*DocumentImageRequest) error
	CloseAndRecv() (*DocumentImageReply, error)
	grpc.ClientStream
}

type hermesDocumentImageStoreClient struct {
	grpc.ClientStream
}

func (x *hermesDocumentImageStoreClient) Send(m *DocumentImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hermesDocumentImageStoreClient) CloseAndRecv() (*DocumentImageReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DocumentImageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HermesServer is the server API for Hermes service.
// All implementations must embed UnimplementedHermesServer
// for forward compatibility
type HermesServer interface {
	DocumentStore(context.Context, *DocumentRequest) (*DocumentReply, error)
	DocumentList(context.Context, *ListRequest) (*ListDocument, error)
	DepartmentStore(context.Context, *DepartmentRequest) (*DepartmentReply, error)
	DepartmentList(context.Context, *ListRequest) (*DepartmentReply, error)
	DocumentTypeStore(context.Context, *DocumentTypeRequest) (*DocumentTypeReply, error)
	DocumentTypeList(context.Context, *ListRequest) (*ListDocumentType, error)
	DocumentImageStore(Hermes_DocumentImageStoreServer) error
	mustEmbedUnimplementedHermesServer()
}

// UnimplementedHermesServer must be embedded to have forward compatible implementations.
type UnimplementedHermesServer struct {
}

func (UnimplementedHermesServer) DocumentStore(context.Context, *DocumentRequest) (*DocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentStore not implemented")
}
func (UnimplementedHermesServer) DocumentList(context.Context, *ListRequest) (*ListDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentList not implemented")
}
func (UnimplementedHermesServer) DepartmentStore(context.Context, *DepartmentRequest) (*DepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentStore not implemented")
}
func (UnimplementedHermesServer) DepartmentList(context.Context, *ListRequest) (*DepartmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepartmentList not implemented")
}
func (UnimplementedHermesServer) DocumentTypeStore(context.Context, *DocumentTypeRequest) (*DocumentTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentTypeStore not implemented")
}
func (UnimplementedHermesServer) DocumentTypeList(context.Context, *ListRequest) (*ListDocumentType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DocumentTypeList not implemented")
}
func (UnimplementedHermesServer) DocumentImageStore(Hermes_DocumentImageStoreServer) error {
	return status.Errorf(codes.Unimplemented, "method DocumentImageStore not implemented")
}
func (UnimplementedHermesServer) mustEmbedUnimplementedHermesServer() {}

// UnsafeHermesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HermesServer will
// result in compilation errors.
type UnsafeHermesServer interface {
	mustEmbedUnimplementedHermesServer()
}

func RegisterHermesServer(s grpc.ServiceRegistrar, srv HermesServer) {
	s.RegisterService(&Hermes_ServiceDesc, srv)
}

func _Hermes_DocumentStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DocumentStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DocumentStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DocumentStore(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DocumentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DocumentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DocumentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DocumentList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DepartmentStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DepartmentStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DepartmentStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DepartmentStore(ctx, req.(*DepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DepartmentList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DocumentTypeStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DocumentTypeStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DocumentTypeStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DocumentTypeStore(ctx, req.(*DocumentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DocumentTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HermesServer).DocumentTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hermes.Hermes/DocumentTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HermesServer).DocumentTypeList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hermes_DocumentImageStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HermesServer).DocumentImageStore(&hermesDocumentImageStoreServer{stream})
}

type Hermes_DocumentImageStoreServer interface {
	SendAndClose(*DocumentImageReply) error
	Recv() (*DocumentImageRequest, error)
	grpc.ServerStream
}

type hermesDocumentImageStoreServer struct {
	grpc.ServerStream
}

func (x *hermesDocumentImageStoreServer) SendAndClose(m *DocumentImageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hermesDocumentImageStoreServer) Recv() (*DocumentImageRequest, error) {
	m := new(DocumentImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hermes_ServiceDesc is the grpc.ServiceDesc for Hermes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hermes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hermes.Hermes",
	HandlerType: (*HermesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DocumentStore",
			Handler:    _Hermes_DocumentStore_Handler,
		},
		{
			MethodName: "DocumentList",
			Handler:    _Hermes_DocumentList_Handler,
		},
		{
			MethodName: "DepartmentStore",
			Handler:    _Hermes_DepartmentStore_Handler,
		},
		{
			MethodName: "DepartmentList",
			Handler:    _Hermes_DepartmentList_Handler,
		},
		{
			MethodName: "DocumentTypeStore",
			Handler:    _Hermes_DocumentTypeStore_Handler,
		},
		{
			MethodName: "DocumentTypeList",
			Handler:    _Hermes_DocumentTypeList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DocumentImageStore",
			Handler:       _Hermes_DocumentImageStore_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "hermes.proto",
}
